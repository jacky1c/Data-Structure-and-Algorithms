===== There are 63 different characters in the file

===== Print the min heap priority queue
1: 2, 1
2: 3, 1
3: C, 1
4: O, 2
5: 4, 1
6: M, 1
7: k, 1
8: 1, 4
9: &, 2
10: V, 3
11: U, 1
12: >, 2
13: ", 8
14: D, 2
15: J, 6
16: :, 14
17: o, 55
18: 0, 4
19: R, 2
20: S, 8
21: Z, 5
22: +, 2
23: X, 1
24: <, 5
25: ., 9
26: E, 12
27: 	, 16
28: ,, 14
29: F, 8
30: w, 13
31: y, 8
32: N, 18
33: (, 15
34: r, 78
35: 
, 80
36: g, 32
37: a, 71
38: T, 6
39: $, 38
40: ), 15
41: _, 13
42: P, 17
43:  , 509
44: A, 3
45: W, 4
46: =, 19
47: e, 108
48: d, 39
49: c, 21
50: b, 9
51: f, 13
52: m, 17
53: h, 30
54: i, 57
55: l, 29
56: I, 29
57: n, 48
58: p, 25
59: s, 55
60: ;, 36
61: t, 67
62: u, 17
63: L, 14



===== Progress in Build function (how Huffman tree is built)
t1:(2,1)+t2:(3,1) = t:(~,2)
t1:(4,1)+t2:(U,1) = t:(~,2)
t1:(X,1)+t2:(C,1) = t:(~,2)
t1:(M,1)+t2:(k,1) = t:(~,2)
t1:(O,2)+t2:(&,2) = t:(~,4)
t1:(R,2)+t2:(+,2) = t:(~,4)
t1:(~,2)+t2:(>,2) = t:(~,4)
t1:(D,2)+t2:(~,2) = t:(~,4)
t1:(~,2)+t2:(~,2) = t:(~,4)
t1:(V,3)+t2:(A,3) = t:(~,6)
t1:(1,4)+t2:(0,4) = t:(~,8)
t1:(W,4)+t2:(~,4) = t:(~,8)
t1:(~,4)+t2:(~,4) = t:(~,8)
t1:(~,4)+t2:(~,4) = t:(~,8)
t1:(Z,5)+t2:(<,5) = t:(~,10)
t1:(T,6)+t2:(~,6) = t:(~,12)
t1:(J,6)+t2:(S,8) = t:(~,14)
t1:(F,8)+t2:(y,8) = t:(~,16)
t1:(~,8)+t2:(~,8) = t:(~,16)
t1:(~,8)+t2:(~,8) = t:(~,16)
t1:(",8)+t2:(.,9) = t:(~,17)
t1:(b,9)+t2:(~,10) = t:(~,19)
t1:(E,12)+t2:(~,12) = t:(~,24)
t1:(_,13)+t2:(w,13) = t:(~,26)
t1:(f,13)+t2:(:,14) = t:(~,27)
t1:(~,14)+t2:(L,14) = t:(~,28)
t1:(,,14)+t2:((,15) = t:(~,29)
t1:(),15)+t2:(	,16) = t:(~,31)
t1:(~,16)+t2:(~,16) = t:(~,32)
t1:(~,16)+t2:(m,17) = t:(~,33)
t1:(u,17)+t2:(~,17) = t:(~,34)
t1:(P,17)+t2:(N,18) = t:(~,35)
t1:(=,19)+t2:(~,19) = t:(~,38)
t1:(c,21)+t2:(~,24) = t:(~,45)
t1:(p,25)+t2:(~,26) = t:(~,51)
t1:(~,27)+t2:(~,28) = t:(~,55)
t1:(~,29)+t2:(l,29) = t:(~,58)
t1:(I,29)+t2:(h,30) = t:(~,59)
t1:(~,31)+t2:(g,32) = t:(~,63)
t1:(~,32)+t2:(~,33) = t:(~,65)
t1:(~,34)+t2:(~,35) = t:(~,69)
t1:(;,36)+t2:($,38) = t:(~,74)
t1:(~,38)+t2:(d,39) = t:(~,77)
t1:(~,45)+t2:(n,48) = t:(~,93)
t1:(~,51)+t2:(s,55) = t:(~,106)
t1:(o,55)+t2:(~,55) = t:(~,110)
t1:(i,57)+t2:(~,58) = t:(~,115)
t1:(~,59)+t2:(~,63) = t:(~,122)
t1:(~,65)+t2:(t,67) = t:(~,132)
t1:(~,69)+t2:(a,71) = t:(~,140)
t1:(~,74)+t2:(~,77) = t:(~,151)
t1:(r,78)+t2:(
,80) = t:(~,158)
t1:(~,93)+t2:(~,106) = t:(~,199)
t1:(e,108)+t2:(~,110) = t:(~,218)
t1:(~,115)+t2:(~,122) = t:(~,237)
t1:(~,132)+t2:(~,140) = t:(~,272)
t1:(~,151)+t2:(~,158) = t:(~,309)
t1:(~,199)+t2:(~,218) = t:(~,417)
t1:(~,237)+t2:(~,272) = t:(~,509)
t1:(~,309)+t2:(~,417) = t:(~,726)
t1:( ,509)+t2:(~,509) = t:(~,1018)
t1:(~,726)+t2:(~,1018) = t:(~,1744)


===== Huffman tree: 

						(a,71)
					(~,140)<
								(N,18)
							(~,35)<
								(P,17)
						(~,69)<
									(.,9)
								(~,17)<
									(",8)
							(~,34)<
								(u,17)
				(~,272)<
						(t,67)
					(~,132)<
								(m,17)
							(~,33)<
											(&,2)
										(~,4)<
											(O,2)
									(~,8)<
											(>,2)
										(~,4)<
												(C,1)
											(~,2)<
												(X,1)
								(~,16)<
												(k,1)
											(~,2)<
												(M,1)
										(~,4)<
											(D,2)
									(~,8)<
										(W,4)
						(~,65)<
									(y,8)
								(~,16)<
									(F,8)
							(~,32)<
										(0,4)
									(~,8)<
										(1,4)
								(~,16)<
											(+,2)
										(~,4)<
											(R,2)
									(~,8)<
												(U,1)
											(~,2)<
												(4,1)
										(~,4)<
												(3,1)
											(~,2)<
												(2,1)
			(~,509)<
							(g,32)
						(~,63)<
								(	,16)
							(~,31)<
								(),15)
					(~,122)<
							(h,30)
						(~,59)<
							(I,29)
				(~,237)<
							(l,29)
						(~,58)<
								((,15)
							(~,29)<
								(,,14)
					(~,115)<
						(i,57)
		(~,1018)<
			( ,509)
	(~,1744)<
								(L,14)
							(~,28)<
									(S,8)
								(~,14)<
									(J,6)
						(~,55)<
								(:,14)
							(~,27)<
								(f,13)
					(~,110)<
						(o,55)
				(~,218)<
					(e,108)
			(~,417)<
						(s,55)
					(~,106)<
								(w,13)
							(~,26)<
								(_,13)
						(~,51)<
							(p,25)
				(~,199)<
						(n,48)
					(~,93)<
										(A,3)
									(~,6)<
										(V,3)
								(~,12)<
									(T,6)
							(~,24)<
								(E,12)
						(~,45)<
							(c,21)
		(~,726)<
					(
,80)
				(~,158)<
					(r,78)
			(~,309)<
						(d,39)
					(~,77)<
									(<,5)
								(~,10)<
									(Z,5)
							(~,19)<
								(b,9)
						(~,38)<
							(=,19)
				(~,151)<
						($,38)
					(~,74)<
						(;,36)


===== In Encode fuction, display character and bit string pair
(;,00000)
($,00001)
(=,000100)
(b,0001010)
(Z,00010110)
(<,00010111)
(d,00011)
(r,0010)
(
,0011)
(c,010000)
(E,0100010)
(T,01000110)
(V,010001110)
(A,010001111)
(n,01001)
(p,010100)
(_,0101010)
(w,0101011)
(s,01011)
(e,0110)
(o,01110)
(f,0111100)
(:,0111101)
(J,01111100)
(S,01111101)
(L,0111111)
( ,10)
(i,11000)
(,,1100100)
((,1100101)
(l,110011)
(I,110100)
(h,110101)
(),1101100)
(	,1101101)
(g,110111)
(2,11100000000)
(3,11100000001)
(4,11100000010)
(U,11100000011)
(R,1110000010)
(+,1110000011)
(1,111000010)
(0,111000011)
(F,11100010)
(y,11100011)
(W,111001000)
(D,1110010010)
(M,11100100110)
(k,11100100111)
(X,11100101000)
(C,11100101001)
(>,1110010101)
(O,1110010110)
(&,1110010111)
(m,1110011)
(t,11101)
(u,1111000)
(",11110010)
(.,11110011)
(P,1111010)
(N,1111011)
(a,11111)

===== Compressed file:


===== Decompressed file:
Program

$$
$$ This program reads a series of words, each of which 
$$ has an associated page number.  The words are then
$$ sorted so that they can be printed in alphabetical
$$ order, each with a list of page numbers associated
$$ with it.  Each word is printed only once, but all
$$ page numbers associated with each occurrence of the
$$ word will be printed.  Duplicate page numbers in the
$$ input will be duplicated in the output file as well.
$$

Procedure Main
   Integer N ;

   Read N ;
   Sort ( N ) ;
End_Procedure ;

$$
$$ This sort routine does all the work.  It reads, sorts,
$$ and prints the words.
$$ A simple selection sort is used.  Names are printed as
$$ they are sorted.
$$

Procedure Sort ( Integer N )
   Array ( N ) Of String Name ;
   Array ( N ) Of String Page ;
   String First , Pagelist ;
   Integer I , J ;
   String Constant Large = " ZZ " , Very_Large = " ZZZ " ; 

   I := 1 ;
   Loop
   While I <= N ;
      Read Name ( I ) , Page ( I ) ;
      I := I + 1 ;
   End_Loop ;

$$
$$ Do the sort and print.
$$

   Loop
      First := Large ;
      I := 1 ;
      J := 0 ;
      Loop
      While I <= N ;
	 If Name ( I ) < First
	 Then
	    If J <> 0
	    Then
	       Name ( J ) := First ;
	       Page ( J ) := Pagelist ;
            End_If ;

	    J := I ;
	    First := Name ( I ) ;
	    Name ( I ) := Very_Large ;
	    Pagelist := Page ( I ) ;
         Else
	    If Name ( I ) = First
	    Then
	       Name ( I ) := Very_Large ;
	       Pagelist := Pagelist & " , " & Page ( I ) ;
            End_If ;
         End_If ;
	 I := I + 1 ;
      End_Loop ;
      Loop
      While First <> Large ;
	 Write First , Pagelist Using " S20 , X3 , S40 , N " ;
      End_Loop ;
   End_Loop ;
End_Procedure ;

End_Program

Program ended with exit code: 0